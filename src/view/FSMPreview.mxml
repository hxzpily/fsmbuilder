<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			private var _text:String;
			
			import mx.controls.textClasses.TextRange;
			import net.anirudh.as3syntaxhighlight.CodePrettyPrint;
			
			private var cssString:String =
				" .spl { font-family:sandboxcode; color: #4f94cd; }" +
				" .str { font-family:sandboxcode; color: #880000; }" +	
				" .kwd { font-family:sandboxcode; color: #000088; }" +	
				" .com { font-family:sandboxcode; color: #008800; }" +	
				" .typ { font-family:sandboxcode; color: #0068CF; }" +	// type
				" .lit { font-family:sandboxcode; color: #006666; }" +	// string literal
				" .pun { font-family:sandboxcode; color: #666600; }" +	// punctuation
				" .pln { font-family:sandboxcode; color: #00cc00; }" +	// plain
				" .tag { font-family:sandboxcode; color: #000088; }" +	// tag - not picked up in FSM
				" .atn { font-family:sandboxcode; color: #660066; }" +
				" .atv { font-family:sandboxcode; color: #880000; }" +
				" .dec { font-family:sandboxcode; color: #660066; } ";
			private var codeStyle:StyleSheet;
			private var codePrettyPrint:CodePrettyPrint;
			private var codeTimer:Timer;
			
			private function onCreationComplete():void
			{
			}
			
			private function codeHighlight():void
			{
				if ( !codeTimer )
				{
					codeTimer = new Timer(200,1);
					codeTimer.addEventListener(TimerEvent.TIMER, doPrettyPrint);
					
				}	
				
				if ( codeTimer.running )
				{
					codeTimer.stop();
				}
				codeTimer.reset();
				// wait for some time to see if we need to highlight or not
				codeTimer.start();
			}
			
			private function processFormattedCode(startIdx:int, endIdx:int, optIdx:int=0):void
			{			
				var srclen:int = endIdx - startIdx;
				var arr:Array = codePrettyPrint.mainDecorations;
				if ( arr == null || srclen < 1 ) 
				{
					return;
				}
				
				var len:int = arr.length;
				var firstNode:Boolean = false;
				var tr:TextRange;
				var thecolor:Object;
				var firstIndex:int = 0;
				for ( var i:int = optIdx; i < len; i+=2 )
				{
					/* find first node */
					if ( arr[i] == 0 )
					{					
						continue;
					}
					else if ( firstNode == false )
					{
						firstNode = true;
						firstIndex = i;
						
					} 
					if ( i - 2 > 0 )
					{
						tr = new TextRange(output, false, arr[i-2] + startIdx, arr[i] + startIdx);
						thecolor = codeStyle.getStyle("." + arr[i-1]).color;
						tr.color = thecolor;
					}
					
				}
				if ( i > 0 )
				{
					i -= 2;
					if ( arr[i] + startIdx < endIdx )
					{
						tr = new TextRange(output, false, arr[i] + startIdx, endIdx);
						thecolor = codeStyle.getStyle("." + arr[i+1]).color;
						tr.color = thecolor;
					}
				}			
				
			}
			
			
			private function doPrettyPrint(event:TimerEvent = null):void
			{
				if ( !codeStyle )
				{
					codeStyle = new StyleSheet();
					codePrettyPrint = new CodePrettyPrint();
					codeStyle.parseCSS(cssString);
				}
				
				codePrettyPrint.prettyPrintOne(output.text, null, false);
				processFormattedCode(0, output.length);
				//trace(res);			
			}

			[Bindable]
			public function get text():String
			{
				return _text;
			}

			public function set text(value:String):void
			{
				_text = value;
				output.text = value;
				codeHighlight();
			}

		]]>
	</fx:Script>
	
	<mx:TextArea id="output"  
				 width="100%" height="100%"
				 styleName="codeTextArea"
				 visible="true" includeInLayout="true" change="codeHighlight()" editable="true">
		
	</mx:TextArea>
</s:Group>
