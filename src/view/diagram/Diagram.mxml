<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="creationComplete()"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:local="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import model.diagram.FSMModel;
			
			[Bindable]
			public var FSMmodel:FSMModel

			private var _newTransition:TransitionObject;

			
			public function creationComplete():void
			{
				addEventListener("delete", stateDelete);
				addEventListener("transitionStart", transitionAdd);
				addEventListener(MouseEvent.MOUSE_UP, transitionConnect);;
			}
			
			
			private function transitionAdd(event:Event):void
			{
				if (event.target is DefaultStateObject)
				{
					var stateView:DefaultStateObject = DefaultStateObject(event.target);
					_newTransition = new TransitionObject();
					_newTransition.stateFrom = stateView.vo; 
					addTransition(_newTransition);
					this.addEventListener(MouseEvent.MOUSE_MOVE, transitionDrag);
				}
			}
			
			private function transitionDrag(event:Event):void
			{
				if (_newTransition)
					_newTransition.drawTo(mouseX, mouseY);
			}
			
			private function transitionConnect(event:Event):void
			{
				if (event.target is DefaultStateObject && _newTransition)
				{
					var stateView:DefaultStateObject = DefaultStateObject(event.target);
					// if linked to the same state - don't bother
					if (_newTransition.stateFrom == stateView.vo)
					{
						// remove transition
						removeTransition(_newTransition)
						_newTransition = null;
					}
					else
					{
						// update transition
						_newTransition.stateTarget = stateView.vo;
						// update state
						_newTransition.stateFrom.addTransition(_newTransition.vo);
						_newTransition = null
						
					}
					this.removeEventListener(MouseEvent.MOUSE_MOVE, transitionDrag);
				}
				else if (_newTransition)
				{
					// remove transition
					removeTransition(_newTransition)
					_newTransition = null;
					this.removeEventListener(MouseEvent.MOUSE_MOVE, transitionDrag);
				}
			}
			
			public function stateCreate(useMousePosition:Boolean = false):void
			{
				var count:int = FSMmodel.states.length
				var state:DefaultStateObject = new DefaultStateObject();
					state.vo = FSMmodel.createNewStateVO();
					state.vo.name = "state " + count;
					
					state.currentState = "view"
					addState(state);
					
				if (useMousePosition)
				{
					state.x = this.mouseX - 50;	// TODO center this 
					state.y = this.mouseY - 20;
				} else {
					state.x = this.width/3 + (count * 20);
					state.y = this.height/3 + (count * 20);	
				}
					
				
			}
			
			public function stateDelete(event:Event):void
			{
				var sv:DefaultStateObject = DefaultStateObject(event.target);
				FSMmodel.deleteState(sv.vo);
				removeState(sv);
			}
			
			protected function keyHandler(event:KeyboardEvent):void
			{
				switch (event.charCode)
				{
					case Keyboard.N:
						stateCreate();
						break;
				}
			}
			
			public function addState(value:DefaultStateObject):void
			{
				stateCanvas.addElement(value);
			}
			
			public function removeState(value:DefaultStateObject):void
			{
				stateCanvas.removeElement(value);
			}
			
			public function addTransition(value:TransitionObject):void
			{
				transitionCanvas.addElement(value);
			}
			
			public function removeTransition(value:TransitionObject):void
			{
				transitionCanvas.removeElement(value);
			}
		]]>
	</fx:Script>
	
	<s:Rect top="0" bottom="0" left="0" right="0">
		<s:fill>
			<s:BitmapFill source="@Embed('/assets/gridTexture.png')" fillMode="repeat"/>
		</s:fill>
	</s:Rect>	
	<s:Group id="transitionCanvas" top="0" left="0" right="0" bottom="0"/>
	<s:Group id="stateCanvas" top="0" left="0" right="0" bottom="0"/>

</s:Group>
