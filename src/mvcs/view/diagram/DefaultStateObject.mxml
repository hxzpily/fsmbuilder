<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:local="*"
		 xmlns:view="mvcs.view.*"
		 minWidth="80" currentState="edit" doubleClick="toggleState(event)"
		 doubleClickEnabled="true" keyDown="keyHandler(event)" mouseDown="dragStart(event)"
		 mouseUp="dragComplete(event)"
		 mouseOver="showAnchor(event)"
		 mouseOut="hideAnchor(event)"
		 creationComplete.anchor="initViewState()" mouseChildren.anchor="true"
		 creationComplete.edit="initEditState()" mouseChildren.edit="true"
		 creationComplete.view="initViewState()" mouseChildren.view="false">
	<s:states>
		<s:State name="edit"/>
		<s:State name="view"/>
		<s:State name="anchor"/>
	</s:states>
	<fx:Declarations>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.edit.SelectionManager;
			
			import mvcs.model.diagram.vo.DiagramPointVO;
			import mvcs.model.diagram.vo.StateVO;
			
			import mx.core.DragSource;
			import mx.events.ColorPickerEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.events.TextOperationEvent;
			
			private const BACKGROUND_COLOUR:int = 0x12caff;
			
			[Bindable]
			public var vo:StateVO;
			
			
			private var _dragReferencePoint:Point;
			
			
			protected function initEditState():void
			{
				focusManager.setFocus(this.stateName);
			}
			
			protected function initViewState():void
			{
				viewCoordsCalibrate();
			}
			
			protected function voUpdate(event:TextOperationEvent):void
			{
				vo.name 			= stateName.text;
				vo.enteringGuard 	= enteringGuard.text;
				vo.exitGuard 		= exitGuard.text;
				vo.changed 			= changedPhase.text;
				vo.entered 			= enteredPhase.text;
				vo.cancelled 		= cancelledPhase.text;
				vo.teardown 		= teardownPhase.text;
			}
			
			protected function toggleState(event:MouseEvent):void
			{
				switch (currentState)
				{
					case "view":
					case "anchor":
						editState()
						break;
					case "edit":
						viewState();
						break
						
				}
				
				event.stopImmediatePropagation();
			}
			
			protected function editState(event:MouseEvent = null):void
			{
				this.currentState = "edit";
				this.mouseChildren = true;
				focusManager.setFocus(this.stateName);
				this.stateName.selectRange(this.stateName.text.length, 0);
				this.depth = 1000;
			}
			
			protected function viewState():void
			{
				this.stage.focus = null;
				this.currentState = "view";
				this.mouseChildren = false;
			}
			
			protected function dragStart(event:MouseEvent):void
			{
				_dragReferencePoint = new Point(this.mouseX, this.mouseY);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, dragUpdate);
			}

			protected function dragUpdate(event:MouseEvent):void
			{
				this.x = parent.mouseX - _dragReferencePoint.x;
				this.y = parent.mouseY - _dragReferencePoint.y;
				viewCoordsCalibrate();
			}
			
			protected function dragComplete(event:MouseEvent):void
			{
				if (_dragReferencePoint)
				{
					viewCoordsCalibrate();
					_dragReferencePoint = null;
					stage.removeEventListener(MouseEvent.MOUSE_MOVE, dragUpdate);
				}
			}
			
			protected function keyHandler(event:KeyboardEvent):void
			{
				if (event.charCode == Keyboard.ENTER || event.charCode == Keyboard.ESCAPE)
					viewState()
			}
			
			protected function changeColour(event:ColorPickerEvent):void
			{
				vo.viewColour = colourPicker.selectedColor;
				backgroundColour.color = colourPicker.selectedColor
			}
			
			protected function deleteHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				dispatchEvent(new Event("delete", true, true));
			}
			
			protected function viewCoordsCalibrate():void
			{
				if (vo)
					vo.viewCoords = new DiagramPointVO(x + width/2, y + height/2);
			}
			
			protected function showAnchor(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (this.currentState != "edit")
					this.currentState = "anchor"
			}
			
			protected function hideAnchor(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (this.currentState == "anchor")
					this.currentState = "view"
			}
			
			protected function addTransition(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				viewState();
				dispatchEvent(new Event("transitionStart", true));
			}
			
		]]>
	</fx:Script>
	
	<!-- background -->
	<s:Rect left="0" top="0" right="0" bottom="0" radiusX="5" radiusY="5">
		<s:stroke>
			<s:SolidColorStroke color="0xffffff" weight="2"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor id="backgroundColour" color="0x12caff"/>
		</s:fill>
	</s:Rect>
	
	<!-- form -->
	<s:VGroup width="100%" height="100%" top="10" left="10" right="10" bottom="7">
		<s:VGroup mouseChildren="false">
			<s:HGroup verticalAlign="middle">
			<s:Label id="stateNameLabel" width="100%" text="{vo.name}" includeIn="anchor,view"/>
				<mx:LinkButton includeIn="anchor,view" label="+" click="addTransition(event)" width="20" height="20" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"/>
			</s:HGroup>
			<s:VGroup id="commands" scaleX=".8" scaleY=".8">
				<s:Label id="enteringGuardLabel" width="100%" text="{'-'+vo.enteringGuard}" includeInLayout="{Boolean(vo.enteringGuard)}" visible="{Boolean(vo.enteringGuard)}" includeIn="anchor,view"/>
				<s:Label id="exitGuardLabel" width="100%" text="{'-'+vo.exitGuard}" includeInLayout="{Boolean(vo.exitGuard)}" visible="{Boolean(vo.exitGuard)}" includeIn="anchor,view"/>
				<s:Label id="cancelledPhaseLabel" width="100%" text="{'-'+vo.cancelled}" includeInLayout="{Boolean(vo.cancelled)}" visible="{Boolean(vo.cancelled)}" includeIn="anchor,view"/>
				<s:Label id="changedPhaseLabel" width="100%" text="{'-'+vo.changed}" includeInLayout="{Boolean(vo.changed)}" visible="{Boolean(vo.changed)}" includeIn="anchor,view"/>
				<s:Label id="teardownPhaseLabel" width="100%" text="{'-'+vo.teardown}" includeInLayout="{Boolean(vo.teardown)}" visible="{Boolean(vo.teardown)}" includeIn="anchor,view"/>
				<s:Label id="enteredPhaseLabel" width="100%" text="{'-'+vo.entered}" includeInLayout="{Boolean(vo.entered)}" visible="{Boolean(vo.entered)}" includeIn="anchor,view"/>
			</s:VGroup>
		</s:VGroup>
			
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:TextInput id="stateName" width="100%" change="voUpdate(event)" text="{vo.name}"/>
		</s:HGroup>
		<s:Label includeIn="edit" width="100%" text="PHASES" textAlign="center"
				 verticalAlign="middle"/>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Entering Guard"/>
			<s:TextInput id="enteringGuard" width="100%" text="{vo.enteringGuard}" change="voUpdate(event)"/>
		</s:HGroup>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Exiting Guard"/>
			<s:TextInput id="exitGuard" width="100%" text="{vo.exitGuard}" change="voUpdate(event)"/>
		</s:HGroup>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Cancelled"/>
			<s:TextInput id="cancelledPhase" width="100%" text="{vo.cancelled}" change="voUpdate(event)"/>
		</s:HGroup>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Changed"/>
			<s:TextInput id="changedPhase" width="100%" text="{vo.changed}" change="voUpdate(event)"/>
		</s:HGroup>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Teardown"/>
			<s:TextInput id="teardownPhase" width="100%" text="{vo.teardown}" change="voUpdate(event)"/>
		</s:HGroup>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Entered"/>
			<s:TextInput id="enteredPhase" width="100%" text="{vo.entered}" change="voUpdate(event)"/>
		</s:HGroup>
		<s:Label includeIn="edit" width="100%" text="VIEW SETTINGS" textAlign="center"
				 verticalAlign="middle"/>
		<s:HGroup includeIn="edit" width="100%" verticalAlign="middle">
			<s:Label text="Box Background"/>
			<mx:ColorPicker id="colourPicker" change="changeColour(event)"
							selectedColor="{BACKGROUND_COLOUR}"/>
		</s:HGroup>
		<s:Button id="delete" label="delete" includeIn="edit" click="deleteHandler(event)"/>
		
	</s:VGroup>
</s:Group>
